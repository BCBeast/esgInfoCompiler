/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package esgalgorithm;
import java.io.*;
import java.io.BufferedReader;
import java.util.ArrayList;

/**
 *
 * @author benjamincheong
 */
public class esgInfoInterface extends javax.swing.JFrame {
        //all companies have these two values
        private static String name = "";
        private static String sector = "";
        private static String comments = "";
        private static double numDatasetsUsed = 0;
        private static boolean inDataset = false;
        //if a company does not have a value for the following attributes, it is not included in the overall ESG score
        //some topics (e.g transparency) are repeated because data 
        private static double averageAgeOfExecutives = -1;
        private static double executiveCompensation = -1;
        private static boolean hasBeenInvolvedInCorruption = false;
        private static double fundsSpentOnLobbying = -1;
        private static String lobbyingAffliation = "";
        private static double fundsSpentOnLobbying2 = -1;
        private static String lobbyingAffliation2 = "";
        private static double scoreForDefenceCorruptionIndex = -1;
        private static double techTransparency = -1;
        private static String yearsOfTechTransparency = "";
        private static double diversityScore = -1;
        private static double transparencyScore = -1;
        private static boolean highPoliticalDonations = false;
        private static boolean childLaborControversies = false;
        private static boolean occupationalSafety = false;
        private static double glassdoorRating = -1;
        private static boolean recycling = false;
        private static boolean commitmentToClimate = false;
        private static boolean commitmentToForests = false;
        private static boolean commitmentToWaterSecurity = false; 
        private static double carbonEmissions = -1;
        private static boolean coalScreen = false;
        private static boolean oilScreen = false;
        private static boolean macroclimateCoalScreen = false;
        private static boolean fossilUtilityScreen = false;
        private static boolean fossilFinanceScreen = false;
        private static double fossilFinanceScore = -1;
        private static boolean fossilInsuranceScreen = false;
        private static double fossilInsuranceRiskScore = -1;
        private static boolean clean200Screen = false;
        private static boolean producerScreen = false;
        private static boolean banksScreen = false;
        private static boolean consumerBrandsScreen = false;
        private static boolean palmOilProducerScreen = false;
        private static boolean palmOilConsumerScreen = false;
        private static boolean paperProducerScreen = false;
        private static boolean paperConsumerScreen = false;
        private static boolean rubberProducerScreen = false;
        private static boolean rubberConsumerScreen = false;
        private static boolean timberProducerScreen = false;
        private static boolean timberConsumerScreen = false;
        private static boolean cattleProducerScreen = false;
        private static boolean cattleConsumerScreen = false;
        private static boolean soyProducerScreen = false;
        private static boolean soyConsumerScreen = false;
        private static boolean gunManufacturersScreen = false;
        private static boolean gunRetailersScreen = false;
        private static boolean prisonIndustryScreen = false;
        private static boolean borderIndustryScreen = false;
        private static boolean higherRiskScreen = false;
        private static boolean PrisonScreen = false;
        private static boolean majorMilitaryScreen = false;
        private static boolean clusterMunitionsScreen = false;
        private static boolean nuclearWeaponsScreen = false;
        private static boolean tobaccoProducersScreen = false;
        private static boolean tobaccoPromoterScreen = false;
    /**
     * Creates new form esgInfoInterface
     */
    public esgInfoInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lblTicker = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lblResult = new javax.swing.JTextArea();
        txtTicker = new javax.swing.JTextField();
        btnResult = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTicker.setText("S&P Company Ticker:");

        lblResult.setColumns(20);
        lblResult.setRows(5);
        jScrollPane1.setViewportView(lblResult);

        btnResult.setText("Find Result");
        btnResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(lblTicker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTicker, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnResult))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTicker)
                    .addComponent(txtTicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnResult)
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void btnResultActionPerformed(java.awt.event.ActionEvent evt) {                                          
        comments = "";
        lblResult.setText(assembleData(txtTicker.getText()));
    }                                         
    
    public static String assembleData(String ticker){
        ticker = ticker.toUpperCase();
        inDataset = false;
        numDatasetsUsed = 0;
        
        ArrayList AccessNow = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/AccessNow.csv");
        ArrayList Aflcio = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/Aflcio.csv");
        ArrayList AsYouSow = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/AsYouSow.csv");
        ArrayList CDP = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/CDP.csv");
        ArrayList CDP1 = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/CDP1.csv");
        ArrayList EthosESG = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/EthosESG.csv");
        ArrayList GLIO = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/GLIO.csv");
        ArrayList Glassdoor = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/Glassdoor.csv");
        ArrayList OpenSecrets1 = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/OpenSecrets1.csv");
        ArrayList OpenSecrets2 = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/OpenSecrets2.csv");
        ArrayList Refinitiv = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/Refinitiv.csv");
        ArrayList SPCompanies = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/S&PCompanies.csv");
        ArrayList SECTransparency = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/SEC&Transparency.csv");
        ArrayList TransparencyInternational = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/TransparencyInternational.csv");
        ArrayList WebsitesChildLabor = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/Websites-ChildLabor.csv");
        ArrayList WebsitesPoliticalDonations = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/Websites-PoliticalDonations.csv");
        ArrayList WebsitesRecycling = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/Websites-Recycling.csv");
        ArrayList YahooFinance = read("/Users/benjamincheong/NetBeansProjects/esgAlgorithm/src/esgalgorithm/YahooFinance.csv");
        
        for(int x=0; x<SPCompanies.size(); x++){
            String info = SPCompanies.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                name = info.substring(info.indexOf(",")+1);
                name = name.substring(0, name.indexOf(","));
                sector = info.substring(info.indexOf("reports,")+8);
                sector = sector.substring(0, sector.indexOf(","));
                inDataset = true;
            }
        }
        for(int x=0; x<AccessNow.size(); x++){
            String info = AccessNow.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                yearsOfTechTransparency = info.substring(info.indexOf(",")+1);
                yearsOfTechTransparency = yearsOfTechTransparency.substring(yearsOfTechTransparency.indexOf(",")+1);
                int count = 1;
                for(int y=0; y<yearsOfTechTransparency.length(); y++){
                    if(yearsOfTechTransparency.charAt(y)==','){
                        count++;
                    }
                }
                techTransparency = count;
                
                comments += "\nTech Transparency: "+techTransparency;
                comments += "\nYears of Tech Transparency: "+yearsOfTechTransparency;
            }
        }
        for(int x=0; x<Aflcio.size(); x++){
            String info = Aflcio.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                String y = info.substring(info.indexOf(",")+1);
                y = y.substring(y.indexOf(",")+1);
                executiveCompensation = Double.parseDouble(y.substring(0,y.indexOf(",")));
                
                comments += "\nExecutive Compensation: "+executiveCompensation;
            }
        }
        for(int x=0; x<AsYouSow.size(); x++){
            String info = AsYouSow.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                String y = info.substring(info.indexOf(",")+1);
                y = y.substring(y.indexOf(",")+1);
                y = y.substring(y.indexOf(",")+1);
                y = y.substring(y.indexOf(",")+1);
                for(int z=0; z<y.length()/2+1; z++){
                    if(!y.substring(0,1).equals("0")){
                        if(z==0){
                            coalScreen = true;
                            comments+= "\nCoal producer";
                        }else if(z==1){
                            oilScreen = true;
                            comments+= "\nOil producer";
                        }else if(z==2){
                            macroclimateCoalScreen = true;
                            comments+= "\nOne of the 30 largest coal public companies";
                        }else if(z==3){
                            fossilUtilityScreen = true;
                            comments+= "\nInvolved in fossil fuels";
                        }else if(z==4){
                            fossilFinanceScreen = true;
                            comments+= "\nFinancial institution involved in fossil fuels";
                        }else if(z==5){
                            fossilFinanceScore = Double.parseDouble(y.substring(0,y.indexOf(",")));
                            comments+= "\nFossil fuel finance risk score: "+fossilFinanceScore;
                        }else if(z==6){
                            fossilInsuranceScreen = true;
                            comments+= "\nOne of the 30 largest primary fossil fuel insurers";
                        }else if(z==7){
                            fossilInsuranceRiskScore = Double.parseDouble(y.substring(0,y.indexOf(",")));
                            comments+= "\nFossil fuel insurance risk score: "+fossilInsuranceRiskScore;
                        }else if(z==8){
                            clean200Screen = true;
                            comments+= "\nOne of the largest 200 companies ranked by green energy revenues";
                        }else if(z==9){
                            producerScreen = true;
                            comments+= "\nInvolved in deforestation";
                        }else if(z==10){
                            banksScreen = true;
                            comments+= "\nFinancial institutions involved in deforestation";
                        }else if(z==11){
                            consumerBrandsScreen = true;
                            comments+= "\nDeforestation consumer";
                        }else if(z==12){
                            palmOilProducerScreen = true;
                            comments+= "\nPalm oil producer";
                        }else if(z==13){
                            palmOilConsumerScreen = true;
                            comments+= "\nPalm oil consumer";
                        }else if(z==14){
                            paperProducerScreen = true;
                            comments+= "\nPaper producer";
                        }else if(z==15){
                            paperConsumerScreen = true;
                            comments+= "\nPaper consumer";
                        }else if(z==16){
                            rubberProducerScreen = true;
                            comments+= "\nRubber producer";
                        }else if(z==17){
                            rubberConsumerScreen = true;
                            comments+= "\nRubber consumer";
                        }else if(z==18){
                            timberProducerScreen = true;
                            comments+= "\nTimber producer";
                        }else if(z==19){
                            timberConsumerScreen = true;
                            comments+= "\nTimber consumer";
                        }else if(z==20){
                            cattleProducerScreen = true;
                            comments+= "\nCattle producer";
                        }else if(z==21){
                            cattleConsumerScreen = true;
                            comments+= "\nCattle consumer";
                        }else if(z==22){
                            soyProducerScreen = true;
                            comments+= "\nSoy producer";
                        }else if(z==23){
                            soyConsumerScreen = true;
                            comments+= "\nSoy consumer";
                        }else if(z==24){
                            gunManufacturersScreen = true;
                            comments+= "\nGun manufacturer";
                        }else if(z==25){
                            gunRetailersScreen = true;
                            comments+= "\nGun retailer";
                        }else if(z==26){
                            prisonIndustryScreen = true;
                            comments+= "\nInvolved in prison industry";
                        }else if(z==27){
                            borderIndustryScreen = true;
                            comments+= "\nInvolved in border industry";
                        }else if(z==28){
                            higherRiskScreen = true;
                            comments+= "\nRisk of rights violations";
                        }else if(z==29){
                            PrisonScreen = true;
                            comments+= "\nOperates prison/detention facility";
                        }else if(z==30){
                            majorMilitaryScreen = true;
                            comments+= "\nIs a major military contractor";
                        }else if(z==31){
                            clusterMunitionsScreen = true;
                            comments+= "\nProduces cluster munitions";
                        }else if(z==32){
                            nuclearWeaponsScreen = true;
                            comments+= "\nProduces nuclear weapons";
                        }else if(z==33){
                            tobaccoProducersScreen = true;
                            comments+= "\nTobacco producer";
                        }else if(z==34){
                            tobaccoPromoterScreen = true;
                            comments+= "\nTobacco promoter";
                        }
                    }
                    y = y.substring(y.indexOf(",")+1);
                }
            }
        }
        for(int x=0; x<CDP.size(); x++){
            String info = CDP.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                String y = info.substring(info.indexOf(",")+1);
                if(y.substring(0,1).equals(",")){
                    commitmentToClimate = false;
                }else{
                    commitmentToClimate = true;
                    comments+= "\nCommitted to climate";
                }
                y = y.substring(y.indexOf(",")+1);
                if(y.substring(1,1).equals(",")){
                    commitmentToForests = false;
                }else{
                    commitmentToForests = true;
                    comments+= "\nCommitted to forests";
                }
                y = y.substring(y.indexOf(",")+1);
                if(y.substring(0,1).equals(",")){
                    commitmentToWaterSecurity = false;
                }else{
                    commitmentToWaterSecurity = true;
                    comments+= "\nCommitted to water security";
                }
            }
        }
        for(int x=0; x<CDP1.size(); x++){
            String info = CDP1.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                carbonEmissions = Double.parseDouble(info.substring(info.lastIndexOf(",")+1));
                comments+= "\nProduces carbon emissions:" +carbonEmissions;
            }
        }
        for(int x=0; x<EthosESG.size(); x++){
            String info = EthosESG.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                occupationalSafety = true;
                comments+= "\nHigh occupational safety";
            }
        }
        for(int x=0; x<GLIO.size(); x++){
            String info = GLIO.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                transparencyScore = Double.parseDouble(info.substring(info.lastIndexOf(",")+1));
                comments+= "\nTransparency score: "+transparencyScore;
            }
        }
        for(int x=0; x<Glassdoor.size(); x++){
            String info = Glassdoor.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                glassdoorRating = Double.parseDouble(info.substring(info.lastIndexOf(",")+1));
                comments+= "\nGlassdoor rating: "+glassdoorRating;
            }
        }
        for(int x=0; x<OpenSecrets1.size(); x++){
            String info = OpenSecrets1.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                String y = info.substring(info.indexOf(",")+1);
                y = y.substring(y.indexOf("$")+1);
                lobbyingAffliation = y.substring(y.indexOf("\"")+2);
                for(int z=0; z<y.length(); z++){
                    if(y.charAt(z)==','){
                        y = y.substring(0,z)+y.substring(z+1);
                    }
                }
                fundsSpentOnLobbying = Double.parseDouble(y.substring(0,y.indexOf(".")));
                
                comments+= "\nLobbying affliation (1998-2022): "+lobbyingAffliation;
                comments+= "\nFunds spent on lobbying (1998-2022): "+fundsSpentOnLobbying;
            }
        }
        for(int x=0; x<OpenSecrets2.size(); x++){
            String info = OpenSecrets2.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                String y = info.substring(info.indexOf(",")+1);
                y = y.substring(y.indexOf("$")+1);
                lobbyingAffliation2 = y.substring(y.indexOf("\"")+2);
                for(int z=0; z<y.length(); z++){
                    if(y.charAt(z)==','){
                        y = y.substring(0,z)+y.substring(z+1);
                    }
                }
                fundsSpentOnLobbying2 = Double.parseDouble(y.substring(0,y.indexOf(".")));
                comments+= "\nLobbying affliation (2022): "+lobbyingAffliation2;
                comments+= "\nFunds spent on lobbying (2022): "+fundsSpentOnLobbying2;
            }
        }
        for(int x=0; x<Refinitiv.size(); x++){
            String info = Refinitiv.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                diversityScore = Double.parseDouble(info.substring(info.lastIndexOf(",")+1));
                comments+= "\nDiversity score: "+diversityScore;
            }
        }
        for(int x=0; x<SECTransparency.size(); x++){
            String info = SECTransparency.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                hasBeenInvolvedInCorruption = true;
                comments+= "\nInvolved in corruption before";
            }
        }
        for(int x=0; x<TransparencyInternational.size(); x++){
            String info = TransparencyInternational.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                scoreForDefenceCorruptionIndex = Double.parseDouble(info.substring(info.lastIndexOf(",")+1));
                comments+= "\nDefence corruption score: "+scoreForDefenceCorruptionIndex;
            }
        }
        for(int x=0; x<WebsitesChildLabor.size(); x++){
            String info = WebsitesChildLabor.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                childLaborControversies = true;
                comments+= "\nInvolved in child labor controversies";
            }
        }
        for(int x=0; x<WebsitesPoliticalDonations.size(); x++){
            String info = WebsitesPoliticalDonations.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                highPoliticalDonations = true;
                comments+= "\nHigh political donations";
            }
        }
        for(int x=0; x<WebsitesRecycling.size(); x++){
            String info = WebsitesRecycling.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                recycling = true;
                comments+= "\nTop recycling strategy";
            }
        }
        for(int x=0; x<YahooFinance.size(); x++){
            String info = YahooFinance.get(x)+"";
            if(info.substring(0,info.indexOf(",")).equals(ticker)){
                numDatasetsUsed++;
                averageAgeOfExecutives = Double.parseDouble(info.substring(info.lastIndexOf(",")+1));
                comments+= "\nAverage age of executives: "+averageAgeOfExecutives;
            }
        }
        if(inDataset==false){
            return "Not in dataset";
        }
        return comments();
    }
    
    public static String comments(){
        //scores();
        String first = "Name: "+name+"\nSector: "+sector+"\n# of Datsets: "+numDatasetsUsed+"\n";
        comments = first+comments;
        System.out.println(comments);
        return comments;
    }
    
    public static ArrayList read(String csvFile) {
        ArrayList<String> lines = new ArrayList<>();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(csvFile));
            String line = null;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
            } catch(IOException ioe) {
                ioe.printStackTrace();
            }
        return lines;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(esgInfoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(esgInfoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(esgInfoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(esgInfoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new esgInfoInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnResult;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea lblResult;
    private javax.swing.JLabel lblTicker;
    private javax.swing.JTextField txtTicker;
    // End of variables declaration                   
}
